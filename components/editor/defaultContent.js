export const defaultContent =
  '<h1>Example notebook</h1><p><strong>There is a new tool in town to run Javascript in your browser.</strong></p><p>It compiles your code using Esbuild (in the browser, <a target="_blank" rel="noopener noreferrer nofollow" href="https://esbuild.github.io/getting-started/#wasm">with WASM</a>!), downloads any dependencies from <a target="_blank" rel="noopener noreferrer nofollow" href="https://unpkg.com">Unpkg</a>, and runs the code in a sandbox environment. That makes it the perfect way to quickly test some JS behaviour, and try out new things!</p><pre result="[[&quot;RESULT&quot;,&quot;test&quot;]]" inputhash="1962109658"><code>return \'test\';</code></pre><p>Let’s play with dependencies!</p><pre result="[[&quot;LOG&quot;,&quot;[2,4,6,8,10]&quot;]]" inputhash="871991715"><code>const _ = require(\'lodash\');\nconst numbers = [1, 2, 3, 4, 5];\n\n// Using lodash, which we dynamically load from a CDN!\nconst doubledNumbers = _.map(numbers, (number) =&gt; number * 2);\nconsole.log(doubledNumbers);</code></pre><p>That’s very simple, but how about this? What changes do you need to make to turn this into a real FizzBuzz exercise?</p><pre result="[[&quot;LOG&quot;,&quot;1&quot;],[&quot;LOG&quot;,&quot;2&quot;],[&quot;LOG&quot;,&quot;Fizz&quot;],[&quot;LOG&quot;,&quot;4&quot;],[&quot;LOG&quot;,&quot;Buzz&quot;],[&quot;LOG&quot;,&quot;Fizz&quot;],[&quot;LOG&quot;,&quot;7&quot;],[&quot;LOG&quot;,&quot;8&quot;],[&quot;LOG&quot;,&quot;Fizz&quot;]]" inputhash="1791755247"><code>let i = 1;\nwhile (i &lt; 10) {\n  if (i % 3 === 0) {\n    console.log("Fizz");\n  } else if (i % 5 === 0) {\n    console.log("Buzz");\n  } else {\n    console.log(i);\n  }\n  i++;\n}</code></pre><p></p><p>Now it’s your turn! Let’s delete all of this (Cmd+A, ⌫) and start fresh.</p><hr><p><em>Author’s notes:</em></p><ul class="-mt-2"><li class="-mb-2"><p>Infinite loops are very easy to achieve. Remove the <code spellcheck="false">i++</code> line above, lots of fun 😨</p></li><li class="-mb-2"><p>We need more docs on how deps are loaded, and ways to output HTML and graphs</p></li><li class="-mb-2"><p>And then a way to store it somewhere where URL sharing is possible 😁</p></li><li class="-mb-2"><p>Some clean loading states would be nice!</p></li></ul>';
